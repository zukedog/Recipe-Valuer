CREATE TABLE Supplier (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    UNIQUE (name)
);

CREATE TABLE Category (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    UNIQUE (name)
    -- Description???
    -- Should there be something to keep recipe and product catagories seperate?
);
-- Categories for Recipes
INSERT INTO Category(name)
VALUES("BaseRecipe");
INSERT INTO Category(name)
VALUES("SubRecipe");
INSERT INTO Category(name)
VALUES("ProductRecipe");

-- Categories for Ingredients
INSERT INTO Category(name)
VALUES("Ingredient");
INSERT INTO Category(name)
VALUES("Wages");
INSERT INTO Category(name)
VALUES("Packaging");

CREATE TABLE Ingredient (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    defaultSupplier INT NOT NULL,
    categoryId INT NOT NULL,
    FOREIGN KEY (categoryId)
        REFERENCES Category(id),
    FOREIGN KEY (defaultSupplier)
        REFERENCES Supplier(id),
    UNIQUE (name)
    -- check defaultSupplier stocks product (Circular Reference??)
    -- check category allows use for ingredient
);

CREATE TABLE IngredientUnit (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    ingredientId INT NOT NULL,
    qtyPerPrimaryUnit INT NOT NULL DEFAULT 1,
    FOREIGN KEY (ingredientId)
        REFERENCES Ingredient(id),
   UNIQUE (name, ingredientId)
   -- First Added should have qty of 1
   -- Dont allow a second till Default Chosen
);

CREATE TABLE DefaultIngredientUnit (
    ingredientId INT PRIMARY KEY,
    unitId INT NOT NULL,
    FOREIGN KEY (ingredientId)
        REFERENCES Ingredient(id),
    FOREIGN KEY (unitId)
        REFERENCES IngredientUnit(id)
    -- Could put a check or something to make sure unit is for ingredient
);

CREATE TABLE Purchase (
    id INT AUTO_INCREMENT PRIMARY KEY,
    supplierId INT NOT NULL,
    ingredientId INT NOT NULL,
    costCents INT NOT NULL,
    purchaseQty DOUBLE NOT NULL,
    purchaseUnitsId INT NOT NULL,
    expired BOOL DEFAULT FALSE,
    dateChanged DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (supplierId)
        REFERENCES Supplier(id),
    FOREIGN KEY (purchaseUnitsId)
        REFERENCES IngredientUnit(id),
    FOREIGN KEY (ingredientId)
        REFERENCES Ingredient(id)
    -- Expiry needs work
);

CREATE TABLE Recipe (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    categoryId INT NOT NULL,
    qty INT NOT NULL ,
    UNIQUE (name),
    FOREIGN KEY (categoryId)
        REFERENCES Category(id)
);

CREATE TABLE RecipeUnit (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    recipeId INT NOT NULL,
    qtyPerPrimaryUnit INT NOT NULL DEFAULT 1,
    FOREIGN KEY (recipeId)
        REFERENCES Recipe(id),
    UNIQUE (name, recipeId)
   -- First Added should have qty of 1
   -- Dont allow a second till Default Chosen
);

CREATE TABLE DefaultRecipeUnit (
    recipeId INT PRIMARY KEY,
    unitId INT NOT NULL,
    FOREIGN KEY (recipeId)
        REFERENCES Recipe(id),
    FOREIGN KEY (unitId)
        REFERENCES RecipeUnit(id)
        -- Could put a check or something to make sure unit is for Recipe
);

CREATE TABLE SubRecipe (
    id INT AUTO_INCREMENT PRIMARY KEY,
    recipeId INT NOT NULL,
    subRecipeId INT NOT NULL,
    qty INT NOT NULL,
    unitId INT NOT NULL,
    FOREIGN KEY (recipeId)
        REFERENCES Recipe(id),
    FOREIGN KEY (subRecipeId)
        REFERENCES Recipe(id),
    FOREIGN KEY (unitId)
        REFERENCES RecipeUnit(id)
);

CREATE TABLE RecipeIngredient (
    id INT AUTO_INCREMENT PRIMARY KEY,
    recipeId INT NOT NULL,
    ingredientId INT NOT NULL,
    qty INT NOT NULL,
    unitId INT NOT NULL,
    FOREIGN KEY (recipeId)
        REFERENCES Recipe(id),
    FOREIGN KEY (ingredientId)
        REFERENCES Ingredient(id),
    FOREIGN KEY (unitId)
        REFERENCES IngredientUnit(id)
);


DROP TABLE RecipeIngredient;
DROP TABLE SubRecipe;
DROP TABLE DefaultRecipeUnit;
DROP TABLE RecipeUnit;
DROP TABLE Recipe;
DROP TABLE Purchase;
DROP TABLE DefaultIngredientUnit;
DROP TABLE IngredientUnit;
DROP TABLE Ingredient;
DROP TABLE Category;
DROP TABLE Supplier;
